# The anchors information is generated from the Glyphs source.
# The script `dump-fee-anchors.py` loads the Glyphs file, and extracts
# anchor information. Loading anchors.fee here just tells FEE about the
# anchors, but does not do anything with them yet.
Include anchors.fee;

# First, we use the ccmp feature (which is processed first by shaping)
# engines to decompose the dots. We provide a number of empty glyphs
# mapped to certain Unicode codepoints; for example, dad-ar is mapped
# to U+0636, but we never plan to use that glyph, but rather immediately
# turn it into its component parts: SADu1 and a dot above.
# Note that at this stage there are certain glyphs (e.g. JIM) which will
# have different dot patterns based on their position. We will fix that
# up in the relevant position-shaping feature.
Feature ccmp {
	Substitute space -> thinspace;
  Substitute BEu1 -> BEu1 sdb;
  Substitute teh-ar -> BEu1 dda;
  Substitute theh-ar -> BEu1 tda;
  Substitute dad-ar -> SADu1 sda;
  Substitute thal-ar -> DALu1 sda;
  Substitute zain-ar -> REu1 sda;
  Substitute sheen-ar -> SINu1 tda;
  Substitute ghain-ar -> AINu1 sda;
  Substitute feh-ar -> FEu1 sda;
  Substitute qaf-ar -> QAFu1 dda;
  Substitute peh-ar -> BEu1 tdb;
  Substitute noon-ar -> NUNu1;
  Substitute rreh-ar -> REu1 toeda;
  Substitute tteh-ar -> BEu1 toeda;
  Substitute zah-ar -> TOEu1 sda;
  Substitute ddal-ar -> DALu1 toeda;
  Substitute jim-ar -> JIMu1;
};

# In the fina feature, we want to achieve three things:
#  1) Select normal final forms (e.g. substitute DALu1 with DALf1)
#  2) Perform exceptions in the Final Forms Table which select f2 forms
#     Unfortunately we don't have the Final Forms Table for Qalmi,
#     so we have to guess.
#  3) Fix up position-specific dots for JIM and its friends, which we punted
#     on in the previous feature.
Feature fina {

  # Reconstructed Qalmi final-forms table. We want to select exception
  # forms for e.g. final RE preceded by one of the glyphs below. Because
  # we are doing the fina feature before the others, all glyphs are currently
  # in their isolated forms.
  #Routine FinaSelection {
    # Substitute [CH_YEu1 AINu1 FEu1 HAYAm1 JIMu1 tcheh-ar khah-ar] { REu1 }    -> REf2;
    #Substitute JIMu1          { CH_YEu1 } -> CH_YEf2;
    #Substitute [CH_YEu1 BEu1] { NUNu1 }   -> NUNf2;
    # We need the ignoremarks flag here because, after ccmp is done, there
    # may be some dots between e.g. BE and NUN.
  #} IgnoreMarks;

  # Now we fix up the JIM-likes.
  Substitute tcheh-ar -> JIMf1 tdi;
  Substitute khah-ar -> JIMf1 sda;
  Substitute JIMu1 -> JIMf1 sdi;

  # Yeh hamza is different, because it can take CH_YE form but no dots.
  Substitute yehHamzaabove-ar -> CH_YEf1 HAMZA_ABOVE;

  # Teh Marbuta Goal
  Substitute tehMarbutagoal-ar -> HAYCf1 dda;

  # Because I'm lazy, SuffixingSubstitute is a custom plugin which creates
  # a substitution by filing off the last component of a glyph name and
  # appending the component on the right-side. i.e AINu1->f1 does
  # AINu1 -> AINf1
  LoadPlugin nastaliqTools.SuffixingSubstitute;
  SuffixingSubstitute [
    AINu1 ALIFu1 BARI_YEu1 BEu1 CH_YEu1 DALu1 FEu1 GAFu1 HAYAu1
    HAYCu1 KAFu1 LAMu1 MIMu1 NUNu1 QAFu1 REu1 SADu1 SINu1 TOEu1
    VAOu1
  ] -> f1;
};

# Nothing much special about the init feature, except that some glyphs
# take the forms of other rasm glyphs (e.g. QAF looks like a FE with no dot)
# in initial position, so we turn them into that. Also fix up JIM again.
Feature init {
  Substitute NUNu1 -> BEi1 sda;
  Substitute CH_YEu1 -> BEi1 ddb;
  Substitute QAFu1 -> FEi1;
  Substitute JIMu1    -> JIMi1 sdb;
  Substitute tcheh-ar -> JIMi1 tdb;
  Substitute khah-ar -> JIMi1 sda;
  Substitute yehHamzaabove-ar -> BEi1 HAMZA_ABOVE;
  Substitute tehMarbutagoal-ar -> HAYCu1 tda;

  SuffixingSubstitute [
    AINu1 BEu1 FEu1 GAFu1 HAYAu1 HAYCu1 KAFu1 LAMu1 MIMu1 SADu1 SINu1 TOEu1
  ] -> i1;
};

# medi is similar, except that (1) the Qalmi patent says that a penultimate
# BE between SIN and final BE should be an exception, (2) Right-joiners take
# final forms in medial position.
Feature medi {

  #Routine Exception1 {
  #  Substitute [SINu1 SINi1 SINm1] { BEu1 } BEf1 -> BEm4;
  #} IgnoreMarks;

  SuffixingSubstitute [
    AINu1 BEu1 FEu1 GAFu1 HAYAu1 KAFu1 LAMu1 MIMu1 SADu1 SINu1 TOEu1
  ] -> m1;
  SuffixingSubstitute [DALu1 REu1] -> f1;

  Substitute QAFu1    -> FEm1;
  Substitute NUNu1    -> BEm1 sda;
  Substitute JIMu1    -> JIMm1 sdb;
  Substitute tcheh-ar -> JIMm1 tdb;
  Substitute khah-ar  -> JIMm1 sda;
  Substitute CH_YEu1  -> BEm1 ddb;
  Substitute HAYCu1   -> HAYCm1 haydb;
  Substitute tehMarbutagoal-ar -> HAYCf1 dda;
  Substitute yehHamzaabove-ar -> BEm1 HAMZA_ABOVE;
};

Feature isol {
  Substitute yehHamzaabove-ar -> CH_YEu1 HAMZA_ABOVE;
  Substitute tehMarbutagoal-ar -> HAYCu1 dda;
};

DefineClass @below_nuktas = /^.db(.yb)?$/;
DefineClass @above_nuktas = /^.da$/;
#DefineClass @other_above_marks = [toeda MADDA DAMMA];
#DefineClass @all_above_marks = @above_nuktas | @other_above_marks;
DefineClass @nuktas = @above_nuktas | @below_nuktas | /^.di$/; # di = JIM dots
DefineClass @nuktas_and_kasra = [@nuktas KASRA KASRA.yb];

DefineClass @below_dots = [@below_nuktas KASRA KASRA.yb];


Feature rlig {
  # Mehr has its own set of final ligature forms, apply these first.
  # TODO: Write a FEE plugin to make this easier.
  Routine Ligatures {
    Substitute /BEm\d+$/ BARI_YEf1 -> BE_BARI_YEf1;
    Substitute /BEi\d+$/ BARI_YEf1 -> BE_BARI_YEu1;
    Substitute /JIMm\d+$/ BARI_YEf1 -> JIM_BARI_YEf1;
    Substitute /JIMi\d+$/ BARI_YEf1 -> JIM_BARI_YEu1;
    Substitute /SINm\d+$/ BARI_YEf1 -> SIN_BARI_YEf1;
    Substitute /SINi\d+$/ BARI_YEf1 -> SIN_BARI_YEu1;
    Substitute /SADm\d+$/ BARI_YEf1 -> SAD_BARI_YEf1;
    Substitute /SADi\d+$/ BARI_YEf1 -> SAD_BARI_YEu1;
    Substitute /TOEm\d+$/ BARI_YEf1 -> TOE_BARI_YEf1;
    Substitute /TOEi\d+$/ BARI_YEf1 -> TOE_BARI_YEu1;
  } IgnoreMarks;

  # The Glyphs file will contain a set of information about selecting
  # connecting glyphs (what the Qalmi patent calls the Generic Selection
  # Table). Code in the Makefile will extract this information from the
  # Glyphs file and into a CSV file (rules.csv). The custom NastaliqConnections
  # plugin reads this CSV file and creates a set of reverse chaining
  # single substitution rules. It also defines the glyph class
  # @reachable_glyphs, which contains all the glyphs which are actually
  # *used* by the rules. (So if you create a JIMm12 but no connection
  # rule ever substitutes it in, we don't need to care about it.)
  LoadPlugin nastaliqTools.NastaliqConnections;
  NastaliqConnections rules.csv;

  DefineClass @medis = /m\d+$/ & @reachable_glyphs;
  DefineClass @inits = /i\d+$/ & @reachable_glyphs;
  DefineClass @finas = /f\d+$/ & @reachable_glyphs;
  # The two following glyph classes are badly named. Really, they're referring
  # to anything which *behaves* like a BE (in the sense that it can "carry" a
  # nukta below the rasm) or anything which *behaves* like a bari ye (in the
  # sense that we need to drop those nuktas to avoid collisions with the tail
  # of the character.)
  DefineClass @behs = /(JIM|BE)[mi]\d+$/ & @reachable_glyphs;
  DefineClass @bariye = /(BARI_YE|JIM|AIN|CH_YE)f1/;


  # This command evaluates all sequences of @behs followed by a @bariye and
  # replaces dots under the tail with "dropped" versions (alternate glyphs
  # with no anchor positioning).
  LoadPlugin BariYe;
  BYMoveDots AlwaysDrop @below_nuktas;
  BYMoveDots AlwaysDrop [KASRA KASRA.yb];

  # Mehr's isolated bari ye ligatures need to be dealt with separately,
  # because they have no preceding glyphs but the nukta following them.
  # This means they're not picked up by the sequence-generator above.
  Routine HandleIsolBariYe {
    Substitute  /BARI_YEu1$/ { [sdb ddb tdb] } -> $1.yb;
  }  UseMarkFilteringSet [sdb ddb tdb];
  Routine HandleIsolBariYeKasra {
    Substitute  /BARI_YEu1$/ { KASRA } -> $1.yb;
  }  UseMarkFilteringSet [KASRA];

};


# The next three features are fairly standard anchor attachment rules.

Feature mark {
  Routine DoMarkBase {
    Attach &top &_top bases;
    Attach &bottom &_bottom bases;
    Attach &comma &_comma bases;
    Attach &bottom2 &_bottom2 bases;
    Attach &inside &_inside bases;
  };
};

Feature curs {
  Routine {Attach &entry &exit cursive; } IgnoreMarks RightToLeft;
};

Feature mkmk {
  Routine DoMarkMark {
    Attach &top &_top marks;
    Attach &bottom &_bottom marks;
    Attach &bottom2 &_bottom2 marks;
  };
};


# And now we do some more positioning. We put this in mkmk because we want
# this to be processed at the end, after anchor positioning is done.
Feature mkmk {

  # Dots and marks on the letter preceding a swash kaf need to be dropped
  # down to avoid collision. Dots get moved right slightly.
  # XXX ideally tall kaf/gaf and short kaf/gaf should be treated differently.
  DefineClass @kafgaf = /^(KAF|GAF)/ & @reachable_glyphs;
  #Routine DropDotsOnTehGaf {
  #  Position @above_nuktas <15 -60 0 0> @kafgaf;
  #  Position @other_above_marks <0 -100 0 0> @kafgaf;
  #} UseMarkFilteringSet [@above_nuktas @other_above_marks];

  # The SeparateConsecutive plugin performs the "knock-on" separation of
  # dots according to the Qalmi patent. It looks for a sequence of consecutive
  # dots up to a given length (3, in this case), and creates rules which
  # *cumulatively* move them all horizontally: it moves the second dot across
  # 240 units, the third dot 360 units, and so on. The mark filtering sets
  # establish whether or not the dots really are cumulative. Two below
  # dots are not cumulative if there is an above dot in the middle, and vice
  # versa.
  LoadPlugin nastaliqTools.SeparateConsecutive;
  Routine SeparateConsecutiveBelowDots {
    SeparateConsecutive [tdi tdb sdb ddb sdb.yb ddb.yb tdb.yb] 3 120;
  } IgnoreBases UseMarkFilteringSet [tdi tdb sdb ddb tdb sda dda sdb.yb ddb.yb tdb.yb];
  Routine SeparateConsecutiveAboveDots {
    SeparateConsecutive [tda sda dda] 3 120;
  } IgnoreBases UseMarkFilteringSet [tdi tdb sdb ddb tdb sda dda];

  # Dots in a bari ye sequence, created by the BYMoveDots rule above, should
  # also be separated.

  #Routine SeparateConsecutiveBariYeDots {
  #  Position [sdb.yb ddb.yb] { KASRA.yb <-0 -250 0 0> };
  #  Position tdb.yb { KASRA.yb <0 -360 0 0> };
  #} IgnoreBases UseMarkFilteringSet @nuktas_and_kasra;

  # If the dots "poke out" the end of a narrow init glyph, we need to
  # add move space both to the dots and to the glyph itself so they
  # don't collide with preceding glyphs.
  DefineClass @overlapping_inits = @inits and (width < xMax(tdb));
  Routine OpenSpaceAroundSmallBehs {
    Position @overlapping_inits <xAdvance=250> @nuktas <xPlacement=25>;
  };

  # Position /[mi]\d+$/ @all_above_marks DAMMA <yPlacement=150> @kafgaf;
};

Feature kern {
  # Final glyphs, isolated glyphs, and space glyphs mark the end of a
  # word. If one word ends and then there is a double-dotted sequence
  # starting the next word, move the start of the word away from the
  # end-of-word character, to stop the below-dots (which we have now
  # cumulatively moved to the right) from clashing into the preceding word.
  DefineClass @endofword = /[fu]\d+|space/;
  Position @endofword { @inits <0 0 200 0> } @below_dots @medis @below_dots;

  Routine GiveChYeDotsMoreSpace {
    Position { /.yb$/ <100 0 0 0> } CH_YEf1;
  } UseMarkFilteringSet /.yb$/;

  Routine DropJimYBDotsMore {
    Position  /.yb$/ @medis { /.yb$/ <50 -280 0 0> } JIMf1;
    Position { /.yb$/ <120 -280 0 0> } JIMf1;
  } UseMarkFilteringSet /.yb$/;

  # This plugin deals with the "short bari ye" problem where a short sequence
  # ending in a bari ye is not long enough to clear the negative RSB of the
  # bari ye tail, and so the tail pokes into the preceding word. (Happens with
  # sequences like ابے) This rule works out the width of all possible sequences
  # and adds a kern to the initial glyph to separate it from the end of the
  # preceding word.
  BYFixOverhang 10 @bariye;

    # Routine ShiftYBNuktasBackwards {
    #   Position /.yb$/ <-100 0 0 0> /.yb$/ <-100 0 0 0>;
    # } IgnoreBases;
};
